name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  template-validation:
    name: Template Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate template structure
      run: |
        echo "üîç Validating template repository structure..."
        
        # Check required template files exist
        required_files=(
          "pyproject.toml"
          "src/{{PROJECT_NAME}}/__init__.py"
          "tests/test_{{PROJECT_NAME}}.py" 
          "setup_project.py"
          "CLAUDE.md.template"
          ".github/workflows/setup-repository-protection.yml"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ] && [ ! -d "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -eq 0 ]; then
          echo "‚úÖ All required template files present"
        else
          echo "‚ùå Missing template files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi
        
        # Check template variables are present
        if grep -r "{{PROJECT_NAME}}" src/ tests/ >/dev/null 2>&1; then
          echo "‚úÖ Template variables found in source files"
        else
          echo "‚ùå Template variables missing - this may not be a proper template"
          exit 1
        fi
        
        echo "üéâ Template validation successful!"

  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.11", "3.12"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Template functionality test
      run: |
        echo "üß™ Testing template functionality on Python ${{ matrix.python-version }}"
        
        # Verify Python version compatibility
        python --version
        
        # Check if setup script can be imported/parsed
        python -m py_compile setup_project.py
        echo "‚úÖ Setup script compiles successfully"
        
        # Validate template files have proper structure
        if [ -f "src/{{PROJECT_NAME}}/__init__.py" ]; then
          echo "‚úÖ Template source structure exists"
        else
          echo "‚ùå Template source structure missing"
          exit 1
        fi
        
        if [ -f "tests/test_{{PROJECT_NAME}}.py" ]; then
          echo "‚úÖ Template test structure exists"
        else
          echo "‚ùå Template test structure missing"
          exit 1
        fi
        
        echo "üéâ Template functionality test passed!"

  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: false

    - name: Install dependencies for linting
      run: |
        # Create minimal pyproject.toml for linting tools
        cat > pyproject_lint.toml << 'EOF'
        [project]
        name = "template-validation"
        version = "0.1.0"
        requires-python = ">=3.9"
        dependencies = []
        
        [project.optional-dependencies]
        dev = [
            "ruff>=0.6.0",
            "mypy>=1.11.0",
        ]
        EOF
        mv pyproject_lint.toml pyproject.toml
        uv sync --extra dev

    - name: Run ruff check
      run: |
        # Check non-template files only
        uv run ruff check . \
          --exclude="src/{{*}}" \
          --exclude="tests/test_{{*}}" \
          --exclude="notebooks/" \
          --exclude="scripts/setup_spark.py" \
          --exclude="noxfile.py" \
          --exclude="setup_project.py" || echo "Ruff check completed with template exclusions"

    - name: Run ruff format check
      run: |
        # Check formatting on non-template files
        uv run ruff format --check . \
          --exclude="src/{{*}}" \
          --exclude="tests/test_{{*}}" \
          --exclude="notebooks/" \
          --exclude="scripts/setup_spark.py" \
          --exclude="noxfile.py" \
          --exclude="setup_project.py" || echo "Ruff format check completed"

    - name: Validate template syntax
      run: |
        echo "üîç Validating template file syntax..."
        
        # Check that template files are valid Python syntax when variables are resolved
        temp_dir=$(mktemp -d)
        
        # Copy template files and replace variables for syntax check
        cp "src/{{PROJECT_NAME}}/__init__.py" "$temp_dir/test_init.py"
        cp "tests/test_{{PROJECT_NAME}}.py" "$temp_dir/test_module.py"
        
        # Replace template variables with valid identifiers
        sed -i 's/{{PROJECT_NAME}}/test_project/g' "$temp_dir/test_init.py"
        sed -i 's/{{PROJECT_NAME}}/test_project/g' "$temp_dir/test_module.py"
        
        # Syntax check
        python -m py_compile "$temp_dir/test_init.py" && echo "‚úÖ Template __init__.py syntax valid"
        python -m py_compile "$temp_dir/test_module.py" && echo "‚úÖ Template test syntax valid"
        
        rm -rf "$temp_dir"

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: false

    - name: Install dependencies for security
      run: |
        # Create minimal pyproject.toml for security tools
        cat > pyproject_security.toml << 'EOF'
        [project]
        name = "template-validation"
        version = "0.1.0"
        requires-python = ">=3.9"
        dependencies = []
        
        [project.optional-dependencies]
        dev = [
            "safety>=3.2.0",
            "bandit>=1.7.0",
        ]
        EOF
        mv pyproject_security.toml pyproject.toml
        uv sync --extra dev

    - name: Run safety check
      run: |
        uv run safety check --json || echo "Safety check completed"

    - name: Run bandit security linter
      run: |
        # Run bandit on non-template files
        uv run bandit -r . -f json \
          --exclude="src/{{*}},tests/test_{{*}},notebooks/,scripts/setup_spark.py" || echo "Bandit completed"

  data-quality:
    name: Data Quality (Notebooks)
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[data]') || github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate notebook templates
      run: |
        echo "üìì Validating notebook templates..."
        
        # Check if notebook templates exist
        if [ -d "notebooks" ]; then
          notebook_count=$(find notebooks/ -name "*.ipynb" | wc -l)
          echo "Found $notebook_count notebook templates"
          
          # Validate notebook structure without executing
          for notebook in notebooks/*.ipynb; do
            if [ -f "$notebook" ]; then
              echo "Validating template: $notebook"
              # Basic JSON validation
              python -c "import json; json.load(open('$notebook'))" && echo "‚úÖ Valid JSON structure" || echo "‚ùå Invalid JSON"
            fi
          done
        else
          echo "No notebook directory found - skipping validation"
        fi

  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [template-validation, test, lint, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate documentation
      run: |
        echo "üìö Validating template documentation..."
        
        # Check required documentation files
        required_docs=(
          "README.md"
          "docs/REPOSITORY_SETUP.md"
          "CLAUDE.md.template"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ -f "$doc" ]; then
            echo "‚úÖ Found: $doc"
            # Basic markdown validation (check if it's readable)
            if head -n 1 "$doc" | grep -q "^#"; then
              echo "‚úÖ $doc appears to be valid markdown"
            fi
          else
            echo "‚ùå Missing: $doc"
            exit 1
          fi
        done
        
        echo "üéâ Documentation validation successful!"